#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция для генерации случайной матрицы смежности
void generateMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = i; j < size; j++) {
            if (i == j) {
                matrix[i][j] = 0; // Диагональ матрицы равна 0
            } else {
                int edge = rand() % 2; // Случайное наличие/отсутствие ребра
                matrix[i][j] = edge;
                matrix[j][i] = edge; // Симметричность для неориентированного графа
            }
        }
    }
}

// Функция для печати матрицы
void printMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Функция для создания и инициализации матрицы
int** createMatrix(int size) {
    int** matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (int*)malloc(size * sizeof(int));
    }
    return matrix;
}

int main() {
    int size;

    printf("Введите размерность матрицы: ");
    scanf("%d", &size);

    // Инициализация генератора случайных чисел
    srand(time(0));

    // Создание и генерация первой матрицы
    int** M1 = createMatrix(size);
    generateMatrix(M1, size);
    printf("Матрица смежности M1:\n");
    printMatrix(M1, size);

    // Создание и генерация второй матрицы
    int** M2 = createMatrix(size);
    generateMatrix(M2, size);
    printf("\nМатрица смежности M2:\n");
    printMatrix(M2, size);

    // Освобождение памяти
    for (int i = 0; i < size; i++) {
        free(M1[i]);
        free(M2[i]);
    }
    free(M1);
    free(M2);

    return 0;
}